{"version":3,"sources":["webpack://elementary-elementary/./src/components/posts.js","webpack://elementary-elementary/./src/templates/tag-posts.js","webpack://elementary-elementary/./src/utils/helpers.js"],"names":["Cell","node","pubDate","frontmatter","shortMonthNameDate","postSlug","slugEditing","fields","slug","className","key","id","Link","to","title","dateTime","published","excerpt","itemProp","dangerouslySetInnerHTML","__html","description","data","map","pageContext","location","tag","totalCount","allMarkdownRemark","posts","nodes","message","metadata","path","pathname","desc","pageName","postMeta","itemScope","itemType","slugify","string","match","x","toLowerCase","join","textArr","split","index","length","date","dateArr","slice"],"mappings":"qKAIMA,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEVC,EAAUD,EAAKE,YAAYD,QAC3BA,IACFA,GAAUE,QAAmBF,IAE/B,IAAMG,GAAWC,QAAY,GAAGL,EAAKM,OAAOC,MAC5C,OACE,2BAASC,UAAU,OAAOC,IAAKT,EAAKU,IAClC,uBAAKF,UAAU,YACb,gBAAC,EAAAG,KAAD,CAAMH,UAAU,YAAYI,GAAE,QAAUR,GACtC,0BAAKJ,EAAKE,YAAYW,OACtB,wBAAMC,SAAUd,EAAKE,YAAYa,WAAYd,IAE9CD,EAAKgB,SACJ,qBACER,UAAU,YACVS,SAAS,cACTC,wBAAyB,CACvBC,OAAQnB,EAAKE,YAAYkB,kBAmBvC,IAVc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,uBAAKb,UAAU,SACZa,EAAKC,KAAI,SAAAtB,GAAI,OACZ,gBAACD,EAAD,CAAMU,IAAKT,EAAKU,GAAIV,KAAMA,U,qFCUlC,UAvCgB,SAAC,GAAqC,IAAnCqB,EAAkC,EAAlCA,KAAME,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAE5BC,EAAQF,EAARE,IACAC,EAAeL,EAAKM,kBAApBD,WACFE,EAAQP,EAAKM,kBAAkBE,MAC/BC,EAAyB,IAAfJ,EAAmB,eAAiB,gBAC9CK,EAAW,CACfC,KAAMR,EAASS,SACfpB,MAAM,QAASY,EACfS,KAAK,IAAKT,EAAN,eAGN,OACE,gBAAC,IAAD,CAAQU,SAAS,YACf,gBAAC,IAAD,CAAKC,SAAUL,IACf,2BACEvB,UAAU,sBACV6B,WAAS,EACTC,SAAS,6BAET,8BACE,uBAAK9B,UAAU,aACb,4CAAoBiB,EAApB,KACA,qBAAGjB,UAAU,YACX,wBAAMA,UAAU,SAASkB,GACxBI,KAKP,2BAAStB,UAAU,mBACjB,gBAAC,IAAD,CAAOa,KAAMO,S,kCCtBhB,SAASW,EAAQC,GACtB,OACEA,GACAA,EACGC,MACC,sEAEDnB,KAAI,SAACoB,GAAD,OAAOA,EAAEC,iBACbC,KAAK,K,iFAIL,IAAMvC,EAAc,SAACmC,GAC1B,IAAMK,EAAUL,EAAOM,MAAM,KACvBC,EAAQF,EAAQG,OAOtB,OALID,EAAQ,EACJ,IAAOF,EAAQE,EAAQ,GAAvB,IAEGP,GAKArC,EAAqB,SAAC8C,GACjC,IAAMC,EAAUD,EAAKH,MAAM,KAG3B,OAFAI,EAAQ,GAAQA,EAAQ,GAAGC,MAAM,EAAG,GAApC,IACeD,EAAQN,KAAK","file":"component---src-templates-tag-posts-js-82b788f8b403d3a6c9fe.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { slugEditing, shortMonthNameDate } from \"../utils/helpers\"\n\nconst Cell = ({ node }) => {\n\n  let pubDate = node.frontmatter.pubDate\n  if (pubDate) {\n    pubDate = shortMonthNameDate(pubDate)\n  }\n  const postSlug = slugEditing(`${node.fields.slug}`)\n  return (\n    <article className=\"post\" key={node.id}>\n      <div className=\"post-row\">\n        <Link className=\"post-link\" to={`/blog${postSlug}`}>\n          <h3>{node.frontmatter.title}</h3>\n          <time dateTime={node.frontmatter.published}>{pubDate}</time>\n        </Link>\n        {node.excerpt && (\n          <p\n            className=\"paragraph\"\n            itemProp=\"description\"\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description,\n            }}\n          />\n        )}\n      </div>\n    </article>\n  )\n}\n\nconst Posts = ({ data }) => {\n  return (\n    <div className=\"posts\">\n      {data.map(node => (\n        <Cell key={node.id} node={node} />\n      ))}\n    </div>\n  )\n}\n\nexport default Posts\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Posts from \"../components/posts\"\nimport Seo from \"../components/seo\"\n\nconst TagPage = ({ data, pageContext, location }) => {\n\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.nodes\n  const message = totalCount === 1 ? \" post found.\" : \" posts found.\"\n  const metadata = {\n    path: location.pathname,\n    title: `Tag: ${tag}`,\n    desc: `\"${tag}\"タグの記事一覧です。`,\n  }\n\n  return (\n    <Layout pageName=\"tag-page\">\n      <Seo postMeta={metadata} />\n      <article\n        className=\"blog-post container\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <div className=\"container\">\n            <h1>Posts tagged: [{tag}]</h1>\n            <p className=\"subtitle\">\n              <span className=\"count\">{totalCount}</span>\n              {message}\n            </p>\n          </div>\n        </header>\n\n        <section className=\"container index\">\n          <Posts data={posts} />\n        </section>\n\n      </article>\n    </Layout>\n  )\n}\n\nexport default TagPage\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___pubDate], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      nodes {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          pubDate(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n        }\n      }\n    }\n  }\n`\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    topic: post.node.frontmatter.topic,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter.thumbnail.childImageSharp.fixed,\n    }),\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport const slugEditing = (string) => {\n  const textArr = string.split(\"/\")\n  const index = textArr.length\n  let result\n  if (index > 3) {\n    result = `/${textArr[index - 2]}/`\n  } else {\n    result = string\n  }\n  return result\n}\n\nexport const shortMonthNameDate = (date) => {\n  const dateArr = date.split(\" \")\n  dateArr[0] = `${dateArr[0].slice(0, 3)}.`\n  const result = dateArr.join(\" \")\n  return result\n}\n"],"sourceRoot":""}