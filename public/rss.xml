<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Elementary Elementary]]></title><description><![CDATA[試行錯誤に暗中模索なWeb活動（制作・開発など）の学習ノートです。]]></description><link>https://elel-jp.com</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 07 May 2021 08:00:16 GMT</lastBuildDate><item><title><![CDATA[Gatsby Docs Tree]]></title><description><![CDATA[Gatsby-Docs   TUTORIAL (9)   HOW-TO-GUIDES (112) Local Development(9)(  ) Routing and Pages(11)(  ) Styling(13)(  ) Adding Images and Media…]]></description><link>https://elel-jp.com/gatsby-docs/gatsby-docs-tree/</link><guid isPermaLink="false">https://elel-jp.com/gatsby-docs/gatsby-docs-tree/</guid><content:encoded>&lt;h2 id=&quot;gatsby-docs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatsby-docs&quot; aria-label=&quot;gatsby docs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby-Docs&lt;/h2&gt;
&lt;div class=&quot;tree&quot;&gt;
Gatsby
├── Docs
    ├── Tutorial(9)
    ├── How-To-Guides(112)
    ├── Reference(38)
    └── Conceptual-Guides(15)
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;tutorial-9&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tutorial-9&quot; aria-label=&quot;tutorial 9 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TUTORIAL (9)&lt;/h2&gt;
&lt;div class=&quot;tree&quot;&gt;
TUTORIAL
├── 0. SetUp Your Development Environment
│    &lt;span class=&quot;jp&quot;&gt;( 0. 開発環境をセットアップします )&lt;/span&gt;
├── 1. Get to Know Gatsby Building Block &lt;span class=&quot;jp&quot;&gt;( ギャツビーのビルディングブロックを知る )&lt;/span&gt;
├── 2. Introduction to Styling in Gatsby &lt;span class=&quot;jp&quot;&gt;( ギャツビーのスタイリング入門 )&lt;/span&gt;
├── 3. Creating Nested Layout Components &lt;span class=&quot;jp&quot;&gt;( ネストされたレイアウトコンポーネントの作成 )&lt;/span&gt;
├── 4. Data in Gatsby &lt;span class=&quot;jp&quot;&gt;( ギャツビーのデータ )&lt;/span&gt;
├── 5. Source Plugins and Rendering Queried Data &lt;span class=&quot;jp&quot;&gt;( ソースプラグインとクエリされたデータのレンダリング )&lt;/span&gt;
├── 6. Transformer Plugins &lt;span class=&quot;jp&quot;&gt;( トランスフォーマー プラグイン )&lt;/span&gt;
├── 7. Programmatically Create Pages from Data &lt;span class=&quot;jp&quot;&gt;( データからプログラムでページを作成する )&lt;/span&gt;
└── 8. Preparing a Site to Go Live &lt;span class=&quot;jp&quot;&gt;( サイトを稼働させるための準備 )&lt;/span&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;how-to-guides-112&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-guides-112&quot; aria-label=&quot;how to guides 112 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HOW-TO-GUIDES (112)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Local Development(9)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Routing and Pages(11)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Styling(13)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Adding Images and Media(8)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Plugins and Themes(16)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Sourcing Data Into Gatsby(11)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Querying For Data(5)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Adding Common Features(13)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Testing(6)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Performance(4)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previews, Deploys, Hosting(11)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;li&gt;How to deploy using Gatsby cloud → Deploying to Gatsby Cloud ( Gatsby Cloudへのデプロイ )&lt;/li&gt;
&lt;li&gt;How to Deploy using Netlify&lt;/li&gt;
&lt;li&gt;Additional Guides(9)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customize Default JS Tools(5)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;reference-38&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference-38&quot; aria-label=&quot;reference 38 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference (38)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Local Development(3)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Built-in React Components(2)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Routing(2)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Config Files(7)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GraphQL Data Layer(6)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Release Notes(18)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;conceptual-guides-15&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conceptual-guides-15&quot; aria-label=&quot;conceptual guides 15 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conceptual-Guides (15)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Building with Components&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GraphQL Concepts&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Marking Your Site Accessible&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Plugins, Themes, Starters&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Gatsby for E-commerce&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Choosing Your CMS(s)&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Gatsby’s Automatic Image Optimizations&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;The Gatsby Build Process&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Build Time and Run Time Data Fetching&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Security in Gatsby&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;The Gatsby Core Philosophy&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Gatsby Jargon&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;What Aer Gatsby Themes?&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Theme Shadowing&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;React Hydration&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&quot;plugins-themes-and-starters（プラグイン・テーマ・スターター）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#plugins-themes-and-starters%EF%BC%88%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%86%E3%83%BC%E3%83%9E%E3%83%BB%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%EF%BC%89&quot; aria-label=&quot;plugins themes and starters（プラグイン・テーマ・スターター） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins, Themes, and Starters（プラグイン・テーマ・スターター）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plugins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plugin docs&lt;/li&gt;
&lt;li&gt;Using a plugin&lt;/li&gt;
&lt;li&gt;Plugin library&lt;/li&gt;
&lt;li&gt;Creating plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Themes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Themes docs&lt;/li&gt;
&lt;li&gt;Using a theme&lt;/li&gt;
&lt;li&gt;Themes in plugin library&lt;/li&gt;
&lt;li&gt;Creating a theme&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Starter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Starter docs&lt;/li&gt;
&lt;li&gt;Modifying a starter&lt;/li&gt;
&lt;li&gt;Starter library&lt;/li&gt;
&lt;li&gt;Creating a starter&lt;/li&gt;
&lt;li&gt;Converting a starter to a theme&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&quot;themes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#themes&quot; aria-label=&quot;themes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Themes&lt;/h3&gt;
&lt;p&gt;In this section:（このセクションで：）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are Gatsby Theme（Gatsbyのテーマとは）&lt;/li&gt;
&lt;li&gt;Getting Started（入門）&lt;/li&gt;
&lt;li&gt;Using a Gatsby Theme（Gatsbyテーマの使用）&lt;/li&gt;
&lt;li&gt;Using Multiple Gatsby Themes（複数のGatsbyテーマの使用）&lt;/li&gt;
&lt;li&gt;Shadowing（シャドウイング）&lt;/li&gt;
&lt;li&gt;Building Themes（テーマの構築）&lt;/li&gt;
&lt;li&gt;Converting a Starter（スターターの変換）&lt;/li&gt;
&lt;li&gt;Theme Composition（テーマ構成）&lt;/li&gt;
&lt;li&gt;Conventions（コンベンション）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Browse theme（テーマを閲覧する）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Themes in Plugin Library(&lt;a href=&quot;https://www.gatsbyjs.com/plugins?=gatsby-theme&quot;&gt;Gatsby Plugin Library&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Theme Jam Showcase(&lt;a href=&quot;https://themejam.gatsbyjs.org/showcase&quot;&gt;Gatsby Theme Jam&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;gatsby-theme-tutorials（gatsbyテーマチュートリアル）plugin--theme-tutorial&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatsby-theme-tutorials%EF%BC%88gatsby%E3%83%86%E3%83%BC%E3%83%9E%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%EF%BC%89plugin--theme-tutorial&quot; aria-label=&quot;gatsby theme tutorials（gatsbyテーマチュートリアル）plugin  theme tutorial permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby theme tutorials（Gatsbyテーマチュートリアル）(plugin &amp;#x26; theme tutorial)&lt;/h3&gt;
&lt;p&gt;In this section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creating a source plugin&lt;/li&gt;
&lt;li&gt;creating a remark transformer plugin&lt;/li&gt;
&lt;li&gt;using a theme&lt;/li&gt;
&lt;li&gt;using multiple themes together&lt;/li&gt;
&lt;li&gt;building a theme&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby blog posts on theme（テーマに関するGatsbyのブログ投稿）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;├── node_modules
├── src
├── .gitignore
├── .prettierrc
├── gatsby-browser.js
├── gatsby-config.js
├── gatsby-node.js
├── gatsby-ssr.js
├── LICENSE
├── package-lock.json
├── package.json
└── README.md&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;jp&quot;&gt;(  )&lt;/span&gt;&lt;/p&gt;
&lt;details open class=&quot;gatsby-docs&quot;&gt;&lt;summary&gt;詳細&lt;/summary&gt;&lt;div&gt;
&lt;/dvi&gt;&lt;/details&gt;</content:encoded></item><item><title><![CDATA[Debugging HTML Build (HTMLビルドのデバッグ)]]></title><description><![CDATA[https://www.gatsbyjs.com/docs/debugging-html-builds/ Errors while building static HTML files (the build-time React SSR process) generally…]]></description><link>https://elel-jp.com/gatsby-docs/debuggin-html-builds/</link><guid isPermaLink="false">https://elel-jp.com/gatsby-docs/debuggin-html-builds/</guid><content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/debugging-html-builds/&quot;&gt;https://www.gatsbyjs.com/docs/debugging-html-builds/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Errors while building static HTML files (the build-time React SSR process) generally happen for one of the following reasons:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;静的HTMLファイルのビルド中のエラー（ビルド時のReact SSRプロセス）は、通常、次のいずれかの理由で発生します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3C;1&gt; Some of your code references “browser globals” like &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; that aren’t available in Node.js. If this is your problem you should see an error above like “window is not defined”. To fix this, find the offending code and either a) check before calling the code if window is defined so the code doesn’t run while Gatsby is building (see code sample below) or b) if the code is in the render function of a React.js component, move that code into a &lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidmount&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; lifecycle&lt;/a&gt; or into a &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useeffect&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; hook&lt;/a&gt;, which ensures the code doesn’t run unless it’s in the browser.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一部のコードは、Node.jsでは使用できない&lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;や&lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt;などの“browser globals”を参照しています。
これが問題である場合は、“window is not defined”などのエラーが表示されるはずです。
これを修正するには、問題のあるコードを見つけて、&lt;/p&gt;
&lt;p&gt;a）Gatsbyのビルド中にコードが実行されないようにwindowが定義されているかどうかをコードを呼び出す前に確認します（以下のコードサンプルを参照）。&lt;/p&gt;
&lt;p&gt;b）コードがReact.jsコンポーネントのレンダリング関数にある場合、そのコードを&lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidmount&quot;&gt;componentDidMountライフサイクル&lt;/a&gt;または&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useeffect&quot;&gt;useEffectフック&lt;/a&gt;に移動します。これにより、ブラウザにない限りコードが実行されなくなります。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3C;2&gt; Check that each of your JS files listed in your &lt;code class=&quot;language-text&quot;&gt;pages&lt;/code&gt; directory (and any sub-directories) are exporting either a React component or string. Gatsby treats any JS file listed under the &lt;code class=&quot;language-text&quot;&gt;pages&lt;/code&gt; dir as a page component, so it must have a default export that’s a component or string.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pages&lt;/code&gt;ディレクトリ（およびサブディレクトリ）にリストされている各JSファイルがReactコンポーネントまたは文字列をエクスポートしていることを確認してください。
Gatsbyは、&lt;code class=&quot;language-text&quot;&gt;pages&lt;/code&gt;ディレクトリの下にリストされているJSファイルをページコンポーネントとして扱います。
したがって、コンポーネントまたは文字列であるデフォルトのエクスポートが必要です。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3C;3&gt; You mix up &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; calls in the same file. This might lead to “WebpackError: Invariant Violation: Minified React error #130” since &lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v1-to-v2/#convert-to-either-pure-commonjs-or-pure-es6&quot;&gt;webpack 4 is stricter than v3&lt;/a&gt;. The solution is to only use &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; and this also extends to &lt;code class=&quot;language-text&quot;&gt;gatsby-ssr&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;gatsby-browser&lt;/code&gt; files.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;同じファイルで&lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;呼び出しと&lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt;呼び出しを混同します。
これにより、“WebpackError：Invariant Violation：Minified React error＃130”につながる可能性があります&lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v1-to-v2/#convert-to-either-pure-commonjs-or-pure-es6&quot;&gt;webpack4はv3よりも厳密&lt;/a&gt;。
解決策は&lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;のみを使用することであり、これは&lt;code class=&quot;language-text&quot;&gt;gatsby-ssr&lt;/code&gt;および&lt;code class=&quot;language-text&quot;&gt;gatsby-browser&lt;/code&gt;ファイルにも拡張されます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3C;4&gt; Your app doesn’t correctly &lt;a href=&quot;https://reactjs.org/docs/react-dom.html&quot;&gt;hydrate&lt;/a&gt; in the client, which results in gatsby develop and gatsby build being inconsistent. It’s possible that a change in a file like &lt;code class=&quot;language-text&quot;&gt;gatsby-ssr&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;gatsby-browser&lt;/code&gt; has a structure that is not reflected in the other file, meaning that there is a mismatch between client and server output.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;アプリがクライアントで正しく&lt;a href=&quot;https://reactjs.org/docs/react-dom.html&quot;&gt;ハイドレイト&lt;/a&gt;されないため、gatsby developとgatsby buildの一貫性が失われます。
&lt;code class=&quot;language-text&quot;&gt;gatsby-ssr&lt;/code&gt;や &lt;code class=&quot;language-text&quot;&gt;gatsby-browser&lt;/code&gt;のようなファイルの変更が、他のファイルに反映されていない構造を持っている可能性があります。
これは、クライアントとサーバーの出力に不一致があることを意味します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3C;5&gt; Some other reason :-) #1 is the most common reason building static files fail. If it’s another reason, you have to be a bit more creative in figuring out the problem.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;他のいくつかの理由：-）＃1は、スタティックファイルの構築が失敗するもっとも一般的な理由です。
べつの理由なら、あなたは問題を理解する上でもう少し創造的でなければなりません。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;how-to-check-if-window-is-defined-br-（windowが定義されているかどうかを確認する方法）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-check-if-window-is-defined-br-%EF%BC%88window%E3%81%8C%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%EF%BC%89&quot; aria-label=&quot;how to check if window is defined br （windowが定義されているかどうかを確認する方法） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to check if &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; is defined &lt;br /&gt;（&lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;が定義されているかどうかを確認する方法）&lt;/h2&gt;
&lt;p&gt;When referencing &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; in a React component.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Reactコンポーネントで&lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;を参照する場合。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;JSX&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-jsx line-numbers&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Check if window is defined (so if in the browser or in node.js).&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// windowが定義されているかどうかを確認（ブラウザまたはnode.jsの場合）&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isBrowser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; loggedIn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isBrowser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localstorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isLoggedIn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Am I logged in? &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loggedIn&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When requiring a module:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;モジュールが必要な場合：
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;JS&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Requiring a function causes an error during builds as the code tries to reference window&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 関数を要求すると、コードがwindowを参照しようとするため、ビルド中にエラーが発生する&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Wrap the require in check for window&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// windowのチェックでrequireをラップする&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case the module needs to be defined for the code to run, you can use a ternary operator&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;コードを実行するためにモジュールを定義する必要がある場合は、三項演算子を使用できます
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;JS&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;fixing-third-party-modules-br-（サードパーティモジュールの修正）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fixing-third-party-modules-br-%EF%BC%88%E3%82%B5%E3%83%BC%E3%83%89%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E4%BF%AE%E6%AD%A3%EF%BC%89&quot; aria-label=&quot;fixing third party modules br （サードパーティモジュールの修正） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fixing third-party modules &lt;br /&gt;（サードパーティモジュールの修正）&lt;/h2&gt;
&lt;p&gt;So, the worst has happened and you’re using an npm module that expects &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; to be defined. You may be able to file an issue and get the module patched, but what to do in the mean time?&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;このように、最悪の事態が発生し、 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;が定義されることを期待するnpmモジュールを使用しています。
問題を報告してモジュールにパッチを適用できる場合があります。しかし、その間に何をすべきでしょうか？
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;One solution is to &lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/custom-configuration/add-custom-webpack-config&quot;&gt;customize&lt;/a&gt; your webpack configuration to replace the offending module with a dummy module during server rendering.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;1つの解決策は、サーバーのレンダリング中に問題のモジュールをダミーモジュールに置き換えるようにwebpack構成を&lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/custom-configuration/add-custom-webpack-config&quot;&gt;カスタマイズ&lt;/a&gt;することです。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby-node.js&lt;/code&gt; in the project root:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;プロジェクトルートの &lt;code class=&quot;language-text&quot;&gt;gatsby-node.js&lt;/code&gt;：
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;gatsby-node.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onCreateWebpackConfig&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; stage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loaders&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; actions &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stage &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build-html&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; stage &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;develop-html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setWebpackConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;bad-module&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            use&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; loaders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another solution is to use a package like &lt;a href=&quot;https://github.com/gregberge/loadable-components&quot;&gt;loadable-components&lt;/a&gt;. The module that tries to use &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; will be dynamically loaded only on the client side (and not during SSR).&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;別の解決策は、&lt;a href=&quot;https://github.com/gregberge/loadable-components&quot;&gt;loadable-components&lt;/a&gt;のようなパッケージを使用することです。
&lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;を使おうとするモジュールは、クライアント側でのみ動的にロードされます（SSR中はロードされません）。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md&quot;&gt;Edit this page on GitHub&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Unit Testing（ユニットテスト）]]></title><description><![CDATA[https://www.gatsbyjs.com/docs/how-to/testing/unit-testing/ Unit testing is a great way to protect against errors in your code before you…]]></description><link>https://elel-jp.com/gatsby-docs/unit-testing/</link><guid isPermaLink="false">https://elel-jp.com/gatsby-docs/unit-testing/</guid><content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/testing/unit-testing/&quot;&gt;https://www.gatsbyjs.com/docs/how-to/testing/unit-testing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unit testing is a great way to protect against errors in your code before you deploy it. While Gatsby does not include support for unit testing out of the box, it only takes a few steps to get up and running. However, there are a few features of the Gatsby build process that mean the standard Jest setup doesn’t quite work. This guide shows you how to set it up.&lt;/p&gt;
&lt;details open class=description&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;単体テストは、コードをデプロイする前にコードのエラーから保護するための優れた方法です。Gatsbyには、すぐに使用できる単体テストのサポートは含まれていませんが、起動して実行するのに数ステップしかかかりません。しかし、Gatsbyビルドプロセスにはいくつかの機能があり、標準のJestセットアップが完全に機能しないことを意味します。このガイドでは、設定方法を説明します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-your-environment-br-（環境のセットアップ）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#setting-up-your-environment-br-%EF%BC%88%E7%92%B0%E5%A2%83%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%EF%BC%89&quot; aria-label=&quot;setting up your environment br （環境のセットアップ） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting up your environment &lt;br /&gt;（環境のセットアップ）&lt;/h2&gt;
&lt;p&gt;The most popular testing framework for React is &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;, which was created by Facebook. While Jest is a general-purpose JavaScript unit testing framework, it has lots of features that make it work particularly well with React.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For this guide, you will be starting with &lt;code class=&quot;language-text&quot;&gt;gatsby-starter-default&lt;/code&gt;, but the concepts should be the same or very similar for your site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Reactのもっとも人気のあるテストフレームワークは、Facebookによって作成された&lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;です。
Jestは汎用のJavaScriptユニットテストフレームワークですが、Reactでとくにうまく機能する多くの機能があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：このガイドでは、gatsby-starter-defaultから始めますが、概念は同じか非常に似ているサイトである必要があります。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-installing-dependencies-br-（依存関係のインストール）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-installing-dependencies-br-%EF%BC%88%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%EF%BC%89&quot; aria-label=&quot;1 installing dependencies br （依存関係のインストール） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Installing dependencies &lt;br /&gt;（依存関係のインストール）&lt;/h3&gt;
&lt;p&gt;First, you need to install &lt;code class=&quot;language-text&quot;&gt;Jest&lt;/code&gt; and some more required packages. Install &lt;code class=&quot;language-text&quot;&gt;babel-jes&lt;/code&gt;t and &lt;code class=&quot;language-text&quot;&gt;babel-preset-gatsby&lt;/code&gt; to ensure that the babel preset(s) that are used match what are used internally for your Gatsby site.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;まず、 &lt;code class=&quot;language-text&quot;&gt;Jest&lt;/code&gt;とその他の必要なパッケージをインストールする必要があります。&lt;code class=&quot;language-text&quot;&gt;babel-jest&lt;/code&gt;と&lt;code class=&quot;language-text&quot;&gt;babel-preset-gatsby&lt;/code&gt;をインストールして、使用されるbabelプリセットがGatsbyサイトで内部的に使用されているものと一致することを確認します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=root data-host=localhost&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev jest babel-jest react-test-renderer babel-preset-gatsby identity-obj-proxy&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-creating-a-configuration-file-for-jest-br-（jestの構成ファイルの作成）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-creating-a-configuration-file-for-jest-br-%EF%BC%88jest%E3%81%AE%E6%A7%8B%E6%88%90%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90%EF%BC%89&quot; aria-label=&quot;2 creating a configuration file for jest br （jestの構成ファイルの作成） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Creating a configuration file for Jest &lt;br /&gt;（Jestの構成ファイルの作成）&lt;/h3&gt;
&lt;p&gt;Because Gatsby handles its own Babel configuration, you will need to manually tell Jest to use &lt;code class=&quot;language-text&quot;&gt;babel-jest&lt;/code&gt;. The easiest way to do this is to add a &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;. You can set up some useful defaults at the same time:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Gatsbyは独自のBabel構成を処理するため、手動でJestに &lt;code class=&quot;language-text&quot;&gt;babel-jest&lt;/code&gt;を使用するように指示する必要があります。
これを行うもっとも簡単な方法は、 &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;を追加することです。いくつかの便利なデフォルトを同時に設定できます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;jest.config.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  transform&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;^.+\\.jsx?$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;rootDir&gt;/jest-preprocess.js&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  moduleNameMapper&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;.+\\.(css|styl|less|sass|scss)$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;identity-obj-proxy&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;.+\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;rootDir&gt;/__mocks__/file-mock.js&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  testPathIgnorePatterns&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\.cache&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;rootDir&gt;.*/public&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  transformIgnorePatterns&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;node_modules/(?!(gatsby)/)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  globals&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    __PATH_PREFIX__&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  testURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;http://localhost&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  setupFiles&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;rootDir&gt;/loadershim.js&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go over the content of this configuration file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; section tells Jest that all &lt;code class=&quot;language-text&quot;&gt;js&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;jsx&lt;/code&gt; files need to be transformed using a &lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt; file in the project root. Go ahead and create this file now. This is where you set up your Babel config. You can start with the following minimal config:&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;この構成ファイルの内容を確認します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt;セクションは、プロジェクトルートの&lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt;ファイルを使用してすべての &lt;code class=&quot;language-text&quot;&gt;js&lt;/code&gt;または&lt;code class=&quot;language-text&quot;&gt;jsx&lt;/code&gt;ファイルを変換する必要があることをJestに通知します。さあ、このファイルを今すぐ作成してください。
ここで、Babel構成を設定します。次の最小限の構成から始めることができます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;filename&quot;&gt;jest-preprocess.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; babelOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  presets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;babel-preset-gatsby&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;babel-jest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTransformer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;babelOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The next option is &lt;code class=&quot;language-text&quot;&gt;moduleNameMapper&lt;/code&gt;. This section works a bit like webpack rules and tells Jest how to handle imports. You are mainly concerned here with mocking static file imports, which Jest can’t handle. A mock is a dummy module that is used instead of the real module inside tests. It is good when you have something that you can’t or don’t want to test. You can mock anything, and here you are mocking assets rather than code. For stylesheets you need to use the package &lt;code class=&quot;language-text&quot;&gt;identity-obj-proxy&lt;/code&gt;. For all other assets, you need to use a manual mock called &lt;code class=&quot;language-text&quot;&gt;file-mock.js&lt;/code&gt;. You need to create this yourself. The convention is to create a directory called &lt;code class=&quot;language-text&quot;&gt;__mocks__&lt;/code&gt; in the root directory for this. Note the pair of double underscores in the name.&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;次のオプションは &lt;code class=&quot;language-text&quot;&gt;moduleNameMapper&lt;/code&gt;です。 このセクションはwebpackルールのように機能し、Jestにインポートの処理方法を説明します。
ここでは主に静的ファイルのインポートのモックに関心がありますが、&lt;code class=&quot;language-text&quot;&gt;Jest&lt;/code&gt;は処理できません。
モックは、テスト内で実際のモジュールの代わりに使用されるダミーモジュールです。 テストできない、またはテストしたくないものがある場合に適しています。
何でもモックできます。ここでは、コードではなくアセットをモックしています。
スタイルシートの場合は、パッケージ &lt;code class=&quot;language-text&quot;&gt;identity-obj-proxy&lt;/code&gt;を使用する必要があります。
ほかのすべてのアセットについては、 &lt;code class=&quot;language-text&quot;&gt;file-mock.js&lt;/code&gt;と呼ばれる手動モックを使用する必要があります。
これは自分で作成する必要があります。慣例では、このためのルートディレクトリに &lt;code class=&quot;language-text&quot;&gt;__mocks__&lt;/code&gt;というディレクトリを作成します。名前の二重下線のペアに注意してください。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;filename&quot;&gt;__mocks__/file-mock.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test-file-stub&quot;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The next config setting is &lt;code class=&quot;language-text&quot;&gt;testPathIgnorePatterns&lt;/code&gt;. You are telling Jest to ignore any tests in the &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;.cache&lt;/code&gt; directories.&lt;/li&gt;
&lt;li&gt;The next option is very important and is different from what you’ll find in other Jest guides. The reason that you need &lt;code class=&quot;language-text&quot;&gt;transformIgnorePatterns&lt;/code&gt; is because Gatsby includes un-transpiled ES6 code. By default Jest doesn’t try to transform code inside &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt;, so you will get an error like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;次の設定は &lt;code class=&quot;language-text&quot;&gt;testPathIgnorePatterns&lt;/code&gt;です。&lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt;または&lt;code class=&quot;language-text&quot;&gt;.cache&lt;/code&gt;ディレクトリ内のテストを無視するようにJestに指示しています。&lt;/li&gt;
&lt;li&gt;次のオプションは非常に重要であり、ほかのJestガイドにあるものとは異なります。&lt;code class=&quot;language-text&quot;&gt;transformIgnorePatterns&lt;/code&gt;が必要な理由は、GatsbyにトランスパイルされていないES6コードが含まれているためです。デフォルトでは、Jestは &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt;内のコードを変換しようとしません。したがって、次のようなエラーが発生します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terminal&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-terminal line-numbers&quot;&gt;&lt;code class=&quot;language-terminal&quot;&gt;/my-app/node_modules/gatsby/cache-dir/gatsby-browser-entry.js:1
({&amp;quot;Object.&amp;lt;anonymous&amp;gt;&amp;quot;:function(module,exports,require,__dirname,__filename,global,jest){import React from &amp;quot;react&amp;quot;
                                                                                            ^^^^^^
SyntaxError: Unexpected token import&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because &lt;code class=&quot;language-text&quot;&gt;gatsby-browser-entry.js&lt;/code&gt; isn’t being transpiled before running in Jest.
You can fix this by changing the default &lt;code class=&quot;language-text&quot;&gt;transformIgnorePatterns&lt;/code&gt; to exclude the &lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt; module.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これは、 &lt;code class=&quot;language-text&quot;&gt;gatsby-browser-entry.js&lt;/code&gt;がJestで実行される前にトランスパイルされていないためです。
これを修正するには、デフォルトの &lt;code class=&quot;language-text&quot;&gt;transformIgnorePatterns&lt;/code&gt;を変更して、&lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt;モジュールを除外します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;globals&lt;/code&gt; section sets &lt;code class=&quot;language-text&quot;&gt;__PATH_PREFIX__&lt;/code&gt;, which is usually set by Gatsby, and which some components need.&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;globals&lt;/code&gt;セクションは&lt;code class=&quot;language-text&quot;&gt;__PATH_PREFIX__&lt;/code&gt;を設定します。これは通常Gatsbyによって設定されますが、一部のコンポーネントに必要です。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You need to set &lt;code class=&quot;language-text&quot;&gt;testURL&lt;/code&gt; to a valid URL, because some DOM APIs such as &lt;code class=&quot;language-text&quot;&gt;localStorage&lt;/code&gt; are unhappy with the default (&lt;code class=&quot;language-text&quot;&gt;about:blank&lt;/code&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: if you’re using Jest 23.5.0 or later, &lt;code class=&quot;language-text&quot;&gt;testURL&lt;/code&gt; will default to &lt;code class=&quot;language-text&quot;&gt;http://localhost&lt;/code&gt; so you can skip this setting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;localStorage&lt;/code&gt;などの一部のDOM APIはデフォルト（&lt;code class=&quot;language-text&quot;&gt;about：blank&lt;/code&gt;）に不満があるため、 &lt;code class=&quot;language-text&quot;&gt;testURL&lt;/code&gt;を有効なURLに設定する必要があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：Jest 23.5.0以降を使用している場合、 &lt;code class=&quot;language-text&quot;&gt;testURL&lt;/code&gt;はデフォルトで&lt;code class=&quot;language-text&quot;&gt;http://localhost&lt;/code&gt;に設定されるため、この設定をスキップできます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;There’s one more global that you need to set, but as it’s a function you can’t set it here in the JSON. The &lt;code class=&quot;language-text&quot;&gt;setupFiles&lt;/code&gt; array lets you list files that will be included before all tests are run, so it’s perfect for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;設定する必要のあるグローバルがもう1つありますが、これは関数であるため、ここではJSONで設定できません。&lt;code class=&quot;language-text&quot;&gt;setupFiles&lt;/code&gt;配列を使用すると、すべてのテストが実行される前に含まれるファイルを一覧表示できます。これに最適です
&lt;/dvi&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;filename&quot;&gt;loadershim.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;global&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;___loader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  enqueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-useful-mocks-to-complete-your-testing-environment-br-（テスト環境を完成させるための便利なモック）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-useful-mocks-to-complete-your-testing-environment-br-%EF%BC%88%E3%83%86%E3%82%B9%E3%83%88%E7%92%B0%E5%A2%83%E3%82%92%E5%AE%8C%E6%88%90%E3%81%95%E3%81%9B%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E4%BE%BF%E5%88%A9%E3%81%AA%E3%83%A2%E3%83%83%E3%82%AF%EF%BC%89&quot; aria-label=&quot;3 useful mocks to complete your testing environment br （テスト環境を完成させるための便利なモック） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Useful mocks to complete your testing environment &lt;br /&gt;（テスト環境を完成させるための便利なモック）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mocking &lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, it’s a good idea to mock the &lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt; module itself. This may not be needed at first, but will make things a lot easier if you want to test components that use &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; or GraphQL.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;さいごに、 &lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt;モジュール自体のモックをオススメします。さいしょは必要ないかもしれません、ただし、 &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt;またはGraphQLを使用するコンポーネントをテストする場合は、作業がはるかに簡単になります。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;__mocks__/gatsby.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; React &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; gatsby &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requireActual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gatsby&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;gatsby&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  graphql&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  Link&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// these props are invalid for an `a` tag&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// これらのpropsは `a`タグには無効です&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      activeClassName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      activeStyle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      getProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      innerRef&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      partiallyActive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      ref&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      replace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;rest
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;rest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        href&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  StaticQuery&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  useStaticQuery&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This mocks the &lt;code class=&quot;language-text&quot;&gt;graphql()&lt;/code&gt; function, &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; component, and &lt;code class=&quot;language-text&quot;&gt;StaticQuery&lt;/code&gt; component.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これは、 &lt;code class=&quot;language-text&quot;&gt;graphql()&lt;/code&gt;関数、 &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt;コンポーネント、および&lt;code class=&quot;language-text&quot;&gt;StaticQuery&lt;/code&gt;コンポーネントをモックします。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;h2 id=&quot;writing-tests（テストを書く）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#writing-tests%EF%BC%88%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F%EF%BC%89&quot; aria-label=&quot;writing tests（テストを書く） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing tests（テストを書く）&lt;/h2&gt;
&lt;p&gt;A full guide to unit testing is beyond the scope of this guide, but you can start with a snapshot test to check that everything is working.&lt;/p&gt;
&lt;p&gt;First, create the test file. You can either put these in a &lt;code class=&quot;language-text&quot;&gt;__tests__&lt;/code&gt; directory, or put them elsewhere (usually next to the component itself), with the extension &lt;code class=&quot;language-text&quot;&gt;.spec.js&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;.test.js&lt;/code&gt;. The decision comes down to your own preference. In this guide, you will use the &lt;code class=&quot;language-text&quot;&gt;__tests__&lt;/code&gt; folder convention. To test the header component, create a header.js file in &lt;code class=&quot;language-text&quot;&gt;src/components/__tests__/&lt;/code&gt;:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;まず、テストファイルを作成します。 これらを &lt;code class=&quot;language-text&quot;&gt;__tests__&lt;/code&gt;ディレクトリに置くことができます。
または、拡張子が&lt;code class=&quot;language-text&quot;&gt;.spec.js&lt;/code&gt;または&lt;code class=&quot;language-text&quot;&gt;.test.js&lt;/code&gt;の別の場所（通常はコンポーネント自体の隣）に配置します。
決定はあなた自身の好みによります。このガイドでは、 &lt;code class=&quot;language-text&quot;&gt;__tests__&lt;/code&gt;フォルダー規則を使用します。
headerコンポーネントをテストするには、 &lt;code class=&quot;language-text&quot;&gt;src/components/__tests__/&lt;/code&gt;にheader.jsファイルを作成します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;src/components/__tests__/header.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; renderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-test-renderer&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Header &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../header&quot;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;renders correctly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; renderer
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Header siteTitle&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Default Starter&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toJSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatchSnapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a very brief snapshot test, which uses &lt;code class=&quot;language-text&quot;&gt;react-test-renderer&lt;/code&gt; to render the component, and then generates a snapshot of it on the first run. It then compares future snapshots against this, which means you can quickly check for regressions. Visit &lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot;&gt;the Jest docs&lt;/a&gt; to learn more about other tests that you can write.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これは非常に簡単なスナップショットテストです。
これは &lt;code class=&quot;language-text&quot;&gt;react-test-renderer&lt;/code&gt;を使用してコンポーネントをレンダリングし、最初の実行時にそのスナップショットを生成します。
次に、将来のスナップショットをこれと比較します。これは、リグレッションをすばやく確認できることを意味します。
&lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot;&gt;Jest docs&lt;/a&gt;にアクセスして、作成できる他のテストの詳細を確認してください。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;h2 id=&quot;running-tests（テストの実行）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#running-tests%EF%BC%88%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%EF%BC%89&quot; aria-label=&quot;running tests（テストの実行） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests（テストの実行）&lt;/h2&gt;
&lt;p&gt;If you look inside &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; you will probably find that there is already a script for &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;, which just outputs an error message. Change this to use the &lt;code class=&quot;language-text&quot;&gt;jest&lt;/code&gt; executable that you now have available, like so:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;の内部を見ると、おそらく&lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;のスクリプトがすでにあります。エラーメッセージを出力するだけです。次のように、現在利用可能な &lt;code class=&quot;language-text&quot;&gt;jest&lt;/code&gt;実行可能ファイルを使用するように変更します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;package.json&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-json line-numbers&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jest&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means you can now run tests by typing &lt;code class=&quot;language-text&quot;&gt;npm test&lt;/code&gt;. If you want you could also run with a flag that triggers watch mode to watch files and run tests when they are changed: &lt;code class=&quot;language-text&quot;&gt;npm test -- --watch&lt;/code&gt;.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これは、&lt;code class=&quot;language-text&quot;&gt;npm test&lt;/code&gt;と入力してテストを実行できます。
必要に応じて、監視モードをトリガーしてファイルを監視し、ファイルが変更されたときにテストを実行するフラグを使用して実行することもできます。： &lt;code class=&quot;language-text&quot;&gt;npm test -- --watch&lt;/code&gt;
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;Run the tests again now and it should all work! You may get a message about the snapshot being written. This is created in a &lt;code class=&quot;language-text&quot;&gt;__snapshots__&lt;/code&gt; directory next to your tests. If you take a look at it, you will see that it is a JSON representation of the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; component. You should check your snapshot files into a source control system (for example, a GitHub repo) so that any changes are tracked in history. This is particularly important to remember if you are using a continuous integration system such as Travis or CircleCI to run tests, as these will fail if the snapshot is not checked into source control.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;今すぐテストを再実行すると、すべて機能するはずです。 書き込まれているスナップショットに関するメッセージが表示されます。
これは、テストの横の &lt;code class=&quot;language-text&quot;&gt;__snapshots__&lt;/code&gt;ディレクトリに作成されます。
これを見ると、 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt;コンポーネントのJSON表現であることがわかります。スナップショットファイルをソース管理システム（GitHubリポジトリなど）にチェックインして、変更が履歴で追跡されるようにする必要があります。
　これは、TravisやCircleCIなどの継続的インテグレーションシステムを使用してテストを実行している場合に覚えておくことがとくに重要です。
　スナップショットがソース管理にチェックインされていない場合、これらは失敗します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;If you make changes that mean you need to update the snapshot, you can do this by running &lt;code class=&quot;language-text&quot;&gt;npm test -- -u&lt;/code&gt;.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;スナップショットを更新する必要がある変更を加えた場合、&lt;code class=&quot;language-text&quot;&gt;npm test -- -u&lt;/code&gt;を実行します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-typescript（typescriptの使用）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#using-typescript%EF%BC%88typescript%E3%81%AE%E4%BD%BF%E7%94%A8%EF%BC%89&quot; aria-label=&quot;using typescript（typescriptの使用） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using TypeScript（TypeScriptの使用）&lt;/h2&gt;
&lt;p&gt;If you are using TypeScript, you need to install typings packages and make two changes to your config.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;TypeScriptを使用している場合は、タイピングパッケージをインストールし、構成に2つの変更を加える必要があります。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=root data-host=localhost&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev @types/jest @types/react-test-renderer&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update the transform in &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt; to run &lt;code class=&quot;language-text&quot;&gt;jest-preprocess&lt;/code&gt; on files in your project’s root directory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code class=&quot;language-text&quot;&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; is replaced by Jest with the root directory of the project. Don’t change it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;の変換を更新して、プロジェクトのルートディレクトリ内のファイルに対して&lt;code class=&quot;language-text&quot;&gt;jest-preprocess&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注： &lt;code class=&quot;language-text&quot;&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt;は、プロジェクトのルートディレクトリを持つJestに置き換えられます。 変更しないでください。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;filename&quot;&gt;jest.config.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;^.+\\.[jt]sx?$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;rootDir&gt;/jest-preprocess.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also update &lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt; with the following Babel preset to look like this:&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;また、 &lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt;をBabelプリセットで次のように更新します。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;jest-preprocess.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; babelOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  presets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;babel-preset-gatsby&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@babel/preset-typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is changed, you can write your tests in TypeScript using the &lt;code class=&quot;language-text&quot;&gt;.ts&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;.tsx&lt;/code&gt; extensions.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これが変更されると、 &lt;code class=&quot;language-text&quot;&gt;.ts&lt;/code&gt;または&lt;code class=&quot;language-text&quot;&gt;.tsx&lt;/code&gt;拡張子を使用してTypeScriptでテストを記述できます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-tsconfig-paths（tsconfigパスの使用）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#using-tsconfig-paths%EF%BC%88tsconfig%E3%83%91%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%EF%BC%89&quot; aria-label=&quot;using tsconfig paths（tsconfigパスの使用） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using tsconfig paths（tsconfigパスの使用）&lt;/h3&gt;
&lt;p&gt;If you are using &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#paths&quot;&gt;tsconfig paths&lt;/a&gt; there is a single change to your config.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;これが変更されると、 &lt;code class=&quot;language-text&quot;&gt;.ts&lt;/code&gt;または&lt;code class=&quot;language-text&quot;&gt;.tsx&lt;/code&gt;拡張子を使用してTypeScriptでテストを記述できます。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3C;1&gt; Add &lt;a href=&quot;https://github.com/kulshekhar/ts-jest&quot;&gt;ts-jest&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=root data-host=localhost&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev ts-jest&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#x3C;2&gt; Update &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt; to import and map &lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt; paths &lt;br /&gt;
（&lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;を更新して、&lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt;パスをインポートしてマッピングします）&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;jest.config.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; compilerOptions &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./tsconfig.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pathsToModuleNameMapper &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ts-jest/utils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; paths &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pathsToModuleNameMapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;compilerOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;paths&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  prefix&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;rootDir&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#x3C;3&gt; Add paths to &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt; moduleNameMapper &lt;br /&gt;
（&lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;にパスを追加します  moduleNameMapper）&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;jest.config.js&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;moduleNameMapper&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;.+\\.(css|styl|less|sass|scss)$&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;identity-obj-proxy&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;.+\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;rootDir&gt;/tests/file-mock.js&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;paths&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;other-resources（その他のリソース）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#other-resources%EF%BC%88%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%EF%BC%89&quot; aria-label=&quot;other resources（その他のリソース） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other resources（その他のリソース）&lt;/h3&gt;
&lt;p&gt;If you need to make changes to your Babel config, you can edit the config in &lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt;. You may need to enable some of the plugins used by Gatsby, though remember you may need to install the Babel 7 versions. See the &lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/custom-configuration/babel&quot;&gt;Gatsby Babel config guide&lt;/a&gt; for some examples.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Babelの設定を変更する必要がある場合は、 &lt;code class=&quot;language-text&quot;&gt;jest-preprocess.js&lt;/code&gt;で設定を編集できます。Gatsbyが使用するプラグインの一部を有効にする必要があります。
Babel7バージョンをインストールする必要があるかもしれないことを覚えておいてください。いくつかの例については、&lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/custom-configuration/babel&quot;&gt;Gatsby Babel構成ガイド&lt;/a&gt;を参照してください。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;For more information on Jest testing, visit &lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot;&gt;the Jest site&lt;/a&gt;.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Jestテストの詳細については、&lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot;&gt;Jestサイト&lt;/a&gt;にアクセスしてください。
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;For an example encapsulating all of these techniques—and a full unit test suite with &lt;a href=&quot;https://github.com/testing-library/react-testing-library&quot;&gt;@testing-library/react&lt;/a&gt;, check out the &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/examples/using-jest&quot;&gt;using-jest&lt;/a&gt; example.&lt;/p&gt;
&lt;details open&gt;&lt;summary&gt;Google翻訳&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;例として
これらすべてのテクニックをカプセル化、およびフルユニットテストスイートの例を確認してください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/testing-library/react-testing-library&quot;&gt;@tests-library/react&lt;/a&gt;,
&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/examples/using-jest&quot;&gt;using-jest&lt;/a&gt;
&lt;/dvi&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md&quot;&gt;Edit this page on GitHub&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>